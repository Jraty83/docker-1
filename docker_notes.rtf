######################################################################################################################################################################

INSTALL HOMEBREW:

• rm -rf $HOME/.brew && git clone --depth=1 https://github.com/Homebrew/brew $HOME/.brew && echo 'export PATH=$HOME/.brew/bin:$PATH' >> $HOME/.zshrc && source $HOME/.zshrc && brew update

######################################################################################################################################################################

MOVE VM MACHINES FOLDER (AND SOFTLINK):

• mv VirtualBox\ VMs /goinfre/jraty (in /Users/jraty)
• ln -s /goinfre/jraty/VirtualBox\ VMs $HOME

######################################################################################################################################################################

INSTALL DOCKER:

• brew install docker
(• mkdir /Users/jraty/.docker)
• mv .docker/ /goinfre/jraty (in /Users/jraty)
• ln -s /goinfre/ismelich/.docker $HOME

(docker version)
	Client: Docker Engine - Community
	Version:           19.03.13
	...
(docker-machine version)
	docker-machine version 0.16.2, build bd45ab1

######################################################################################################################################################################

00_HOW_TO_DOCKER:

01:		docker-machine create Char

02:		docker-machine ip Char

03:		eval $(docker-machine env Char) - you have to create the environment for EACH terminal!!
		(env
			-> DOCKER_TLS_VERIFY=1
			   DOCKER_HOST=tcp://192.168.99.101:2376
			   export=
			   DOCKER_CERT_PATH=/Users/jraty/.docker/machine/machines/Char
			   DOCKER_MACHINE_NAME=Char)

		(docker-machine regenerate-certs Char) - to regenerate certs if necessary

04:		docker pull hello-world

05:		docker run hello-world
			-> Hello from Docker!
			   This message shows that your installation appears to be working correctly.
			   ...

06:		docker run --name overlord --restart always -p 5000:80 -d nginx
			--name <name>			(give a specific name to your container)
			--restart <policy> 		(set restart policy)
			-p 5000:80				(binds port 80 of the container to port 5000 of the host machine)
					** -p <ip-de-char>:5000:80 (you can specify host's ip 192.168.99.100)
			-d						(run in background = detached mode)

		TEST: http://<ip-de-char>:5000 on your web browser.
			-> Welcome to nginx! ...

07:		docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' <name>
			(-> docker start overlord) if necessary

08:		docker run -it --rm alpine
			-i						Interactive mode (Keep STDIN open even if not attached)
					* -t			Allocate a pseudo-TTY
			--rm 					(automatically remove the container when it exits)

09:		docker run -it --rm debian
		apt-get update -y && apt-get upgrade -y
		apt-get install build-essential vim git -y
			* gcc --version			(to check you have gcc installed properly)
			* git --version			(to check you have git installed properly)
		
10:		docker volume create --name hatchery
			* docker volume ls		(to check volumes)

11:		docker volume ls -q

12:		docker run --name spawning-pool --mount source=hatchery,target=/var/lib/mysql -e MYSQL_ROOT_PASSWORD=Kerrigan -e MYSQL_DATABASE=zerglings --restart on-failure -d mysql
			-> bash 13
					MYSQL_ROOT_PASSWORD=Kerrigan
					MYSQL_DATABASE=zerglings
			-> docker inspect spawning-pool
					"Mounts": [
					{
						"Type": "volume",
						"Source": "hatchery",
						"Target": "/var/lib/mysql"
					...
			-> docker inspect -f {{.HostConfig.RestartPolicy}} spawning-pool
					{on-failure 0}
			-> docker exec -it spawning-pool mysql -uroot -p
					-> mysql> show databases;
							+--------------------+
							| Database           |
							+--------------------+
							| information_schema |
							| mysql              |
							| performance_schema |
							| sys                |
							| zerglings          |
							+--------------------+
							5 rows in set (0.02 sec)

13:		docker exec spawning-pool printenv

14:		docker run --name lair --link spawning-pool:mysql -p 8080:80 -d wordpress
			-> http://192.168.99.100:8080/

15:		docker run --name roach-warden --link spawning-pool:db -p 8081:80 -d phpmyadmin
			-> http://192.168.99.100:8081/
					Username:	root
					Password:	Kerrigan

16:		docker logs -f spawning-pool

17:		docker ps

18:		docker restart overlord
			-> docker exec -it overlord /bin/sh -c "kill 1"
			-> docker inspect -f {{.RestartCount}} overlord
					1 (kill again ... 2 ...3)

19:		docker run --name Abathur -dit -v $HOME:/root -p 3000:3000 python:2-slim
		docker exec Abathur pip install flask
		echo 'from flask import Flask\napp = Flask(__name__)\n@app.route("/")\ndef hello_world():\n\treturn "<h1>Hello World</h1>"' > ~/app.py
		docker exec -e FLASK_APP=/root/app.py Abathur flask run --host=0.0.0.0 --port 3000

20:		docker swarm init --advertise-addr $(docker-machine ip Char)
			-> docker info
					...
					Swarm: active
					NodeID: m4oj1ubr4k4681j4y0y8307z3
					Is Manager: true
					ClusterID: iefibruzxae1u79y79zfyh1h7
					Managers: 1
					Nodes: 1
					...
			-> docker node ls
					ID								HOSTNAME	STATUS	AVAILABILITY	MANAGER STATUS	ENGINE VERSION
					m4oj1ubr4k4681j4y0y8307z3 *		Char		Ready	Active			Leader			19.03.12
			-> docker swarm leave --force (to leave a swarm)

21:		docker-machine create --driver virtualbox Aiur

22:		docker-machine ssh Aiur "docker swarm join --token $(docker swarm join-token worker -q) $(docker-machine ip Char):2377"
			-> docker node ls
					ID								HOSTNAME	STATUS	AVAILABILITY	MANAGER STATUS	ENGINE VERSION
					8p1xupywwrqqgjfs5642pcjp0		Aiur		Ready	Active							19.03.12
					m4oj1ubr4k4681j4y0y8307z3 *		Char		Ready	Active			Leader			19.03.12

23:		docker network create -d overlay --internal overmind
			-> docker network ls
			-> docker network inspect overmind
					...
					"Internal": true,

24:		docker service create --name orbital-command --network overmind -e RABBITMQ_DEFAULT_USER=user -e RABBITMQ_DEFAULT_PASS=password rabbitmq
			-> docker service ps orbital-command
					Running
			-> docker service inspect -f {{.Spec.TaskTemplate.ContainerSpec.Env}} orbital-command
					[RABBITMQ_DEFAULT_USER=user RABBITMQ_DEFAULT_PASS=password]

25:		docker service ls

26:		docker service create --name engineering-bay --network overmind --replicas=2 -e OC_USERNAME=user -e OC_PASSWD=password 42school/engineering-bay
			-> docker service ls
					REPLICAS
					2/2
			-> docker service ps engineering-bay
					engineering-bay.1		Running
					engineering-bay.2		Running
			-> docker service inspect -f "{{.Spec.TaskTemplate.ContainerSpec.Env}}" engineering-bay
					[OC_USERNAME=user OC_PASSWD=password]

27:		docker service logs -f engineering-bay

28:		docker service create --name marines --network overmind --replicas=2 -e OC_USERNAME=user -e OC_PASSWD=password 42school/marine-squad
			-> docker service inspect -f "{{.Spec.TaskTemplate.ContainerSpec.Env}}" marines 
					[OC_USERNAME=user OC_PASSWD=password]
			-> docker service logs -f marines
			-> docker service logs marines

29:		docker service ps marines

30:		docker service scale marines=20
			-> docker service ps marines
					20 Running services
			-> docker service logs -f marines

31:		docker service rm $(docker service ls -q)
			-> docker service ls
					NO services...

32:		docker rm -f $(docker ps -a -q)
			-> docker ps
			-> docker ps -a
					NO containers...

33:		docker rmi $(docker images -a -q)
			-> docker image ls
					NO images...

34:		docker-machine rm Aiur -y
			-> docker-machine ls
					NO MORE Aiur...

######################################################################################################################################################################

01_DOCKERFILES:

ex00:	MY DOCKERFILE:
			FROM alpine:latest
			RUN apk update \
				&& apk add vim
			ENTRYPOINT ["vi", "test.c"]

		TO BUILD THE IMAGE:
		docker build -t <name> .
			(OR		docker build -t <name> -f /path/to/Dockerfile .)
		
		TO CHECK:
		docker image ls
				REPOSITORY		TAG			IMAGE ID			CREATED				SIZE
				simpanssi		latest		c5767044cd8a		4 seconds ago		34.3MB
				alpine			latest		a24bb4013296		4 months ago		5.57MB
		
		docker run -it --name <name> <image>
		-> docker ps
				CONTAINER ID	IMAGE		COMMAND				CREATED				STATUS			PORTS		NAMES
				3ab543515667	simpanssi	"vi test.c"			3 seconds ago		Up 2 seconds				gg

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

ex01:	MY DOCKERFILE:
			FROM debian
			ENV TS3SERVER_LICENSE=accept
			WORKDIR /home/teamspeak
			EXPOSE 9987/udp 10011 30033
			RUN apt-get update && \
				apt-get upgrade -y && \
				apt-get install -y wget bzip2 && \
				wget http://dl.4players.de/ts/releases/3.0.13.4/teamspeak3-server_linux_amd64-3.0.13.4.tar.bz2 && \
				tar -xvf teamspeak3-server_linux_amd64-3.0.13.4.tar.bz2
			WORKDIR teamspeak3-server_linux_amd64
			#ENTRYPOINT sh ts3server_minimal_runscript.sh
			ENTRYPOINT sh ts3server_startscript.sh
		
		TO BUILD THE IMAGE:
		docker build -t <name> .

		TO RUN THE SERVER:
		docker run --name <name> -p 9987:9987/udp -p 10011:10011 -p 30033:30033 -d <image>
		#docker run --name <name> -p 9987:9987/udp -p 10011:10011 -p 30033:30033 -e TS3SERVER_LICENSE=accept -d <image>

		TO CHECK:
		docker image ls
				REPOSITORY		TAG			IMAGE ID			CREATED				SIZE
				paviaani		latest		b69ede3371ef		17 minutes ago		164MB
				debian			latest		1510e8501783		8 days ago			114MB

		docker ps
				CONTAINER ID	IMAGE		COMMAND					CREATED			STATUS			PORTS																		NAMES
				1288bb8acc5d	paviaani	"/bin/sh -c 'sh ts3s…"	4 minutes ago	Up 4 minutes	0.0.0.0:10011->10011/tcp, 0.0.0.0:9987->9987/udp, 0.0.0.0:30033->30033/tcp	my_teamspeak

		docker logs <name> (to check the log and/or admin password etc.)

		OPEN TEAMSPEAK 3 CLIENT:
		(ts3server://192.168.99.100:10011)
	
		-> Connections-> Connect (from menu bar)
		-> Server Nickname or Address = Your VM (Char) IP
		-> Server Password = token=XnShb8BAcoDJOiHo4oaYRE+OGxuz5BpoGXrdAFQ+ (the whole thing... from logs)
		-> Nickname = serveradmin (or choose one...)
		-> Connect
			-> Privilege Key = token=XnShb8BAcoDJOiHo4oaYRE+OGxuz5BpoGXrdAFQ+ (same as server password)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

ex02:	Create ft-rails/ subfolder (for a Dockerfile in a Dockerfile...)
		
		DOCKERFILE (IN /FT-RAILS):
				FROM ruby:2.5.1
				RUN apt-get update && apt-get install -y nodejs
				RUN gem install rails --version 5.2.0
				RUN mkdir -p /opt/app
				COPY app /opt/app										(works once you've downloaded the app)
				ONBUILD WORKDIR /opt/app								(set the working directory)
				ONBUILD RUN bundle install
				ONBUILD RUN rake db:create								(create a database)
				ONBUILD RUN rake db:migrate								(setup the tables in the database)
				ONBUILD RUN rake db:seed								(load default data to your application)

		DOCKERFILE (IN "ROOT"):
				FROM ft-rails:on-build									(use previously built image as a base and launch the ONBUILD triggers)

				EXPOSE 3000												(indicate the port on which the container listens for connections)
				CMD ["rails", "s", "-b", "0.0.0.0", "-p", "3000"]		(bind all IPv4 addresses on the local machine and port 3000 to the server)

		RUN.SH SCRIPT (IN "ROOT"):
				cd ft-rails/															(goto ft-rails/)
				git clone https://github.com/RailsApps/rails-signup-thankyou.git app	(get the app from git)
				docker build -t ft-rails:on-build .										(build first image and set triggers)
				cd ..																	(goto "root")
				docker build -t ex02 .													(build the final image using ONBUILD triggers)
				docker run --name my_rubyapp -p 3000:3000 -d ex02						(run the server, in detached mode)

		-> http://192.168.99.100:3000/

		docker logs -f <image>
				=> Booting Puma
				=> Rails 5.2.0 application starting in development 
				=> Run `rails server -h` for more startup options
				Puma starting in single mode...
				* Version 3.11.4 (ruby 2.5.1-p57), codename: Love Song
				* Min threads: 5, max threads: 5
				* Environment: development
				* Listening on tcp://0.0.0.0:3000
				Use Ctrl-C to stop
		
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

ex03:	


















######################################################################################################################################################################

USEFUL COMMANDS:

• docker-machine ls (to list docker machines)

• docker ps (to see active/running containers)
• docker ps -a (to see all containers)

• docker exec <container> <command> (docker ps, to see running containers)
	-> docker exec my_teamspeak ls -l

• docker inspect <name> (to see container's configs)

• docker stop <name> (stop container(s)) - use "NAMES"

• docker-machine rm <name> (to remove a machine)
